/**
 * Module dependencies
 */
var utils = require('../utils');
var util = require('util');
var safeRequire = utils.safeRequire;
var arango = safeRequire('arango');
var url = require('url');

exports.initialize = function initializeSchema(schema, callback) {
    if (!arango) return;
    var s = schema.settings;

    if (schema.settings.url) {
        var uri = url.parse(schema.settings.url);
        s.host = uri.hostname;
        s.port = uri.port || '8529';
        s.database = uri.pathname.replace(/^\//, '');
        s.username = uri.auth && uri.auth.split(':')[0];
        s.password = uri.auth && uri.auth.split(':')[1];
    }
    s.host = s.host || 'localhost';
    s.port = parseInt(s.port || '8529', 10);
    s.database = s.database || 'test';
    if (!schema.settings.url) {
        var durl = schema.settings.host || 'localhost';
        if (schema.settings.port)
            durl += ':' + schema.settings.port;
        var auth = '';
        if (schema.settings.username) {
            auth = schema.settings.username;
            if (schema.settings.password) {
                auth += ':' + schema.settings.password;
            }
        }
        if (auth) {
            durl = auth + '@' + url;
        }
        durl += '/';
        durl = 'http://' + durl;
        schema.settings.url = durl;
    }
    schema.adapter = new Arango(schema, callback);
};

function ArangoId(fullId) {
    var parts = fullId.split('/');
    this._id = parts[0];
    this._rev = parts[1];
};

ArangoId.prototype.id = function () {
    return this._id;
};

ArangoId.prototype.rev = function () {
    return this._rev;
};

ArangoId.prototype.fullId = function () {
    return this._id + '/' + this._rev;
};

ArangoId.prototype.setRev = function (rev) {
    this._rev = rev;
};

function Arango(schema, callback) {
    var self = this;
    self.name = 'arango';
    self._models = {};
    self.server = arango.Connection(schema.settings.url);
    self.server.database.create(schema.settings.database).then(function (res) {
        console.log('Database ' + schema.settings.database + ' created!');
    }, function (err) {
        if (err.errorNum !== 1207) {
            console.log("Failed to create database: %j", err);
        }
    });
    var db = self.server.use('/' + schema.settings.database);
    self._client = db;
    schema.client = db;
    process.nextTick(function () {
        callback();
    });
}

Arango.prototype.define = function (descr) {
    var self = this, indexes = [], uniques = [];
    if (!descr.settings) descr.settings = {};
    this._models[descr.model.modelName] = descr;

    Object.keys(descr.properties).forEach(function (k) {
        if (typeof descr.properties[k].index !== 'undefined' || typeof descr.properties[k].unique !== 'undefined') {
            if (typeof descr.properties[k].unique !== 'undefined') {
                uniques.push(k);
            } else {
                indexes.push(k);
            }
            // self.collection(descr.model.modelName).ensureIndex(fields, params);
        }
    });

    if (indexes.length) {
        self._client.index.createHashIndex(descr.model.modelName, indexes, false, function(err, index){
            if(err) console.log(err, index);
        });
    }
    if (uniques.length) {
        self._client.index.createHashIndex(descr.model.modelName, uniques, true, function(err, index){
            if(err) console.log(err, index);
        });
    }
};

Arango.prototype.defineForeignKey = function (model, key, cb) {
    cb(null, String);
};

Arango.prototype.fromDatabase = function (model, data) {
    if (!data) return null;
    var props = this._models[model].properties;
    Object.keys(data).forEach(function (key) {
        var val = data[key];
        if (props[key]) {
            if (props[key].type.name === 'Date' && val !== null) {
                val = new Date(val);
            }
        }
        data[key] = val;
    });
    return data;
};

Arango.prototype.create = function (model, data, callback) {
    var self = this;
    self._client.document.create(model, data, {}, function (err, res, hdr) {
        if (callback) {
            if (err) {
                callback(err, null);
            } else {
                data.id = parseInt((res._id || '0').split('/')[1]);
                self._client.document.put(res._id, data, {}, function (err, res) {
                    callback(null, parseInt(res._key));
                });
            }
        }
    });
};

Arango.prototype.findById = function (model, id, callback) {
    var self = this;
    // mop: hmmm the test is trying to fetch a model with id 1. However that will trigger a 400 (invalid id format in arangodb)
    // fix the test for now but this is of course a hack here
    if (typeof id !== 'string') {
        id = model + '/' + id;
    }
    self._client.document.get(id, function (err, data) {
        if (err && data.code == 404) {
            return callback(null);
        }
        callback(err ? err : null, err ? null : self.fromDatabase(model, data));
    });
};

Arango.prototype.exists = function (model, id, callback) {
    // mop: megagay...just to fix the fcking test
    if (typeof id !== 'string') {
        id = model + '/' + id;
    }
    this._client.document.get(id, function (err, data) {
        if (!err) {
            callback(null, true);
        } else if (data.code == 404) {
            callback(null, false);
        } else {
            callback(err);
        }
    });
};

Arango.prototype.all = function (model, filter, callback) {
    var key;
    var self = this;
    var query = this._client.query.new();
    query.for('result')
        .in(model)
        .return('result');

    var queryArgs = {}, index, partName, realKey;

    var resultFunction = function (err, res, hdr) {
        if (err) {
            callback(res);
        } else {
            var mapFn = function (o) {
                o = self.fromDatabase(model, o);
                o.id = parseInt((o._id).split('/')[1]);
                delete o._id;
                return o;
            };
            var objs = res.result.map(mapFn);
            if (filter && filter.include) {
                self._models[model].model.include(objs, filter.include, callback);
            } else {
                callback(null, objs);
            }
        }
    };

    if (filter) {
        if (filter.where) {
            var filterQuery = [];
            var index = 0;
            Object.keys(filter.where).forEach(function (k) {
                var cond = filter.where[k];
                var spec = false;
                partName = 'where' + (index++);
                key = k;
                if (key == 'id') {
                    key = '_id';
                }

                if (cond && cond.constructor.name === 'Object') {
                    spec = Object.keys(cond)[0];
                    cond = cond[spec];
                }
                if (spec) {
                    if (spec === 'between') {
                        // mop: XXX need to check docs
                        throw new Error("between statements not supported for arangodb");
                    } else {
                        queryArgs[partName] = cond;
                        filterQuery.push('result.' + key + ' IN @' + partName);
                    }
                } else {
                    if (key == 'id') {
                        cond = model + '/' + cond;
                    }
                    queryArgs[partName] = cond;
                    filterQuery.push('result.' + key + ' == @' + partName);
                }
            });
            if (filterQuery.length) {
                query.filter(filterQuery.join(' && '));
            }
        }
        if (filter.order) {
            var order = 'result.' + filter.order;
            if (typeof order === 'string') order = [order];
            query.sort(order.join(', '));
        }
        if (filter.limit) {
            if (filter.skip) {
                query.limit(filter.skip + "," + filter.limit);
            } else {
                query.limit(filter.limit);
            }
        }
    }
    this._client.query.string = query.toString();
    this._client.query.exec(queryArgs, resultFunction);
};

Arango.prototype.save = function (model, data, callback) {
    var id = data.id;
    if (typeof id !== 'string') {
        id = model + '/' + id;
    }
    console.log('inst', id)
    this._client.document.put(id, data, {}, function (err, res) {
        callback(err ? err : null);
    });
};

Arango.prototype.updateOrCreate = function (model, data, callback) {
    var adapter = this;
    if (!data.id) {
        return this.create(model, data, callback);
    }
    // mop: copypasta from mongodb
    this.find(model, data.id, function (err, inst) {
        if (!err) {
            adapter.updateAttributes(model, data.id, data, callback);
        } else {
            delete data.id;
            adapter.create(model, data, function (err, id) {
                if (err) return callback(err);
                if (id) {
                    data.id = id;
                    delete data._id;
                    callback(null, data);
                } else {
                    callback(null, null); // wtf?
                }
            });
        }
    });
};

Arango.prototype.destroy = function (model, id, callback) {
    if (typeof id !== 'string') {
        id = model + '/' + id;
    }
    this._client.document.delete(id, function (err) {
        callback(err);
    });
};

Arango.prototype.updateAttributes = function (model, id, newData, callback) {
    this.find(model, id, function (err, data) {
        if (err) {
            callback(err);
        } else {
            for (var key in newData) {
                if (newData.hasOwnProperty(key)) {
                    data[key] = newData[key];
                }
            }
            data.id = id;
            this.save(model, data, callback);
        }
    }.bind(this));
};

Arango.prototype.count = function (model, callback, where) {
    if (!where) {
        this._client.collection.count(model, function (err, result) {
            callback(err ? err : null, err ? null : result.count);
        });
    } else {
        this._client.simple.example(model, where, {}, function (err, result) {
            if (err) {
                callback(err, result);
            } else {
                callback(null, result.count);
            }
        });
    }
};

/**
 * Update existing database collections.
 * @param {Function} cb
 */
Arango.prototype.autoupdate = function (cb) {
    var self = this, pending = 0;
    Object.keys(this._models).forEach(function (model) {
        pending++;
        self._client.collection.create(model, {waitForSync: true}, function (err) {
            if (err) {
                if (cb) {
                    cb(err);
                } else {
                    console.log(err);
                }
            } else {
                collectionCreated();
            }
        });
    }, self);

    var collectionCreated = function () {
        if (--pending == 0 && cb) {
            cb();
        }
    }
};

/**
 * Re create existing database collections.
 * @param {Function} callback
 */
Arango.prototype.automigrate = function (callback) {
    var self = this, pending = 0;
    Object.keys(self._models).forEach(function (model) {
        pending++;
        self._client.collection.delete(model, function (err, result) {
            if (!err || result.code == 404) {
                self._client.collection.create(model, {waitForSync: true}, function (err) {
                    if (err) {
                        if (callback) {
                            callback(err);
                        } else {
                            console.log(err);
                        }
                    } else {
                        collectionCreated();
                    }
                });
            }
        }.bind(self));
    }, self);

    var collectionCreated = function () {
        if (--pending == 0 && callback) {
            callback();
        }
    }
};
// TODO
Arango.prototype.remove = function remove(model, filter, callback) {
    var cond = buildWhere(filter.where);
    this.collection(model).remove(cond, callback);
};
/**
 * Truncate collection.
 * @param {Function} callback
 */
Arango.prototype.destroyAll = function (model, callback) {
    this._client.collection.truncate(model, function (err, result) {
        if (err) {
            callback(err, []);
        } else {
            callback(null);
        }
    });
};

Arango.prototype.ensureIndex = function ensureIndex(model, fields, params, callback) {
    'use strict';
    self._client.index.createHashIndex(model, fields, params.unique, function(err, index){
        if(err) console.log(err, index);
    });
    process.nextTick(callback)
};